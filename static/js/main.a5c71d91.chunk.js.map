{"version":3,"sources":["actions.js","TodoItem.js","TodoList.js","App.js","serviceWorker.js","reducer.js","index.js"],"names":["toggleDelete","todoId","type","payload","TodoItem","className","this","props","completed","checked","onChange","handleToggle","title","onClick","event","id","Component","mapDispatchToProps","connect","TodoList","todos","map","todo","key","toggleTodo","todoIdToToggle","App","state","todosList","value","handleDelete","todoIdToDelete","handleCreate","addTodo","setState","handleChange","target","handleClear","newTodoList","filter","placeholder","autoFocus","onKeyDown","exact","path","render","length","to","activeClassName","clearCompletedTodos","todoTitle","userId","Math","floor","random","Boolean","window","location","hostname","match","initialState","reducer","action","newTodo","store","createStore","ReactDOM","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a5c71d91.chunk.js","sourcesContent":["\n// action types\nexport const TOGGLE_TODO = \"TOGGLE_TODO\";\nexport const CLEAR_COMPLETED_TODOS = \"CLEAR_COMPLETED_TODOS\";\nexport const ADD_TODO = \"ADD_TODO\";\nexport const DELETE_TODO = \"DELETE_TODO\";\n\n\n\n// action creator functions\n\nexport const toggleDelete = (todoId) => {\n    return {\n        type: DELETE_TODO,\n        payload: todoId\n    }\n}\n\n\n\nexport const toggleTodo = todoIdToToggle => {\n    return {\n        type: TOGGLE_TODO,\n        payload: todoIdToToggle\n    };\n};\n\n\n\nexport const addTodo = (todoTitle) => {\n    //       add the todo\n    //   this.state.value\n    //   const newTodoList = this.state.todos.slice();\n    const newTodo = {\n        userId: 1,\n        id: Math.floor(Math.random() * 100000000),\n        title: todoTitle,\n        completed: false\n    };\n    return {\n        type: ADD_TODO,\n        payload: newTodo,\n    };\n};\n\nexport const clearCompletedTodos = () => {\n    return {\n        type: CLEAR_COMPLETED_TODOS\n    };\n};","import React, { Component } from \"react\";\nimport {connect} from 'react-redux'\nimport { toggleDelete } from './actions'\n\nclass TodoItem extends Component {\n  render() {\n    return (\n      <li className={this.props.completed ? \"completed\" : \"\"}>\n        <div className=\"view\">\n          <input\n            className=\"toggle\"\n            type=\"checkbox\"\n            checked={this.props.completed}\n            onChange={this.props.handleToggle}\n          />\n          <label>{this.props.title}</label>\n          <button className=\"destroy\"\n            onClick={event => this.props.toggleDelete(this.props.id)}\n          />\n        </div>\n      </li>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  toggleDelete\n}\n\nexport default connect(null, mapDispatchToProps)(TodoItem);","import React, { Component } from \"react\";\nimport TodoItem from \"./TodoItem\";\nimport { connect } from \"react-redux\";\nimport { toggleTodo } from \"./actions\";\nimport { toggleDelete} from \"./actions\";\n\n\n\n\nclass TodoList extends Component {\n  render() {\n    return (\n      <section className=\"main\">\n        <ul className=\"todo-list\">\n          {this.props.todos.map(todo => (\n            <TodoItem\n              key={todo.id}\n              id = {todo.id}\n              //handleToggle={event => this.props.toggleTodo(todo.id)}\n              // handleDelete={event => this.props.toggleDelete(event, todo.id)}\n              handleToggle={event => this.props.toggleTodo(todo.id)}\n              title={todo.title}\n              completed={todo.completed}\n            />\n          ))}\n        </ul>\n      </section>\n    );\n  }\n}\nconst mapDispatchToProps = {\n  toggleTodo, toggleDelete\n}\n\n// store.dispatch(toggelTodo())\nexport default connect(null, mapDispatchToProps)(TodoList);","import React, { Component } from \"react\";\nimport \"./index.css\";\nimport todosList from \"./todos.json\";\nimport { Route, NavLink } from \"react-router-dom\";\nimport TodoList from \"./TodoList\"\nimport { connect } from \"react-redux\"\nimport { addTodo, clearCompletedTodos } from \"./actions\"\n\n\nclass App extends Component {\n  state = {\n    todos: todosList,\n    value: \"\",\n    completed: false\n  };\n  // event handlers = inside we are using this.setState\n  handleDelete = (event, todoIdToDelete) => {\n    // identify what we want to change in state\n    // create a copy of state and modify it\n    // const newTodoList = this.state.todos.filter(\n    //   todo => todo.id !== todoIdToDelete  // generate true/false\n    // );\n    // // overwrite the old state with new state\n    // this.setState({ todos: newTodoList });\n  };\n\n  handleCreate = (event) => {\n    // event.key\n    if (event.key === \"Enter\") {\n      this.props.addTodo(this.state.value);\n      this.setState({ value: \"\" });\n    }\n  };\n\n  // handleToggle = todoIdToToggle => {\n\n  // };\n\n  handleChange = (event) => {\n    this.setState({ value: event.target.value })\n  };\n\n  handleClear = (event) => {\n    const newTodoList = this.state.todos.filter(\n      todo => todo.completed === false\n    );\n    this.setState({ todos: newTodoList });\n  };\n\n\n  render() {\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>D&A</h1>\n          <input\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            autoFocus\n            onKeyDown={this.handleCreate}\n            onChange={this.handleChange}\n            value={this.state.value}\n          />\n        </header>\n        <Route\n          exact\n          path=\"/\"\n          render={() => (\n            <TodoList\n              handleClear={this.handleClear}\n              handleDelete={this.handleDelete}\n              todos={this.props.todos}\n            />\n          )}\n        />\n        <Route\n          path=\"/active\"\n          render={() => (\n            <TodoList\n              handleClear={this.handleClear}\n              handleDelete={this.handleDelete}\n              todos={this.props.todos.filter(todo => todo.completed === false)}\n            />\n          )}\n        />\n        <Route\n          path=\"/completed\"\n          render={() => (\n            <TodoList\n              handleClear={this.handleClear}\n              handleDelete={this.handleDelete}\n              todos={this.props.todos.filter(todo => todo.completed === true)}\n            />\n          )}\n        />\n        <footer className=\"footer\">\n          {/* <!-- This should be `0 items left` by default --> */}\n          <span className=\"todo-count\">\n            <strong>{this.props.todos.filter(todo => todo.completed !== true).length}</strong> item(s) left\n          </span>\n          <ul className=\"filters\">\n            <li>\n              <NavLink exact to=\"/\" activeClassName=\"selected\">\n                All\n                </NavLink>\n            </li>\n            <li>\n              <NavLink to=\"/active\" activeClassName=\"selected\">\n                Active\n                </NavLink>\n            </li>\n            <li>\n              <NavLink to=\"/completed\" activeClassName=\"selected\">\n                Completed\n                </NavLink>\n            </li>\n          </ul>\n          <button onClick={this.props.clearCompletedTodos} className=\"clear-completed\">Clear completed</button>\n        </footer>\n      </section>\n    );\n  }\n}\n\n\n//mapStateToProps\nconst mapStateToProps = (state) => {\n  return {\n    todos: state.todos\n  }\n}\n//mapDispatchToProps\n// store.dispatch\n// add \"addTodo\" as a prop to the component \n// When we call \"this.props.addTodo\", it will make sure to call store.dispatch(addTodo())\nconst mapDispatchToProps = {\n  addTodo, clearCompletedTodos\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import todosList from \"./todos.json\";\nimport { TOGGLE_TODO, CLEAR_COMPLETED_TODOS, ADD_TODO, DELETE_TODO } from \"./actions\";\n\n\nconst initialState = {\n    todos: todosList,\n    completed: false\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case TOGGLE_TODO: {\n            const newTodoList = state.todos.map(todo => {\n                if (todo.id === action.payload) {\n                    const newTodo = { ...todo }\n                    newTodo.completed = !newTodo.completed;\n                    return newTodo;\n                }\n                return todo;\n            });\n            return { ...state, todos: newTodoList };\n        }\n        case ADD_TODO: {\n            return { ...state, todos: [...state.todos, action.payload] };\n        }\n        case DELETE_TODO: {\n            const newTodoList = state.todos.filter(\n                todo => todo.id !== action.payload)\n            return { todos: newTodoList }\n        };\n\n        case CLEAR_COMPLETED_TODOS: {\n            return {\n                ...state,\n                todos: state.todos.filter(todo => todo.completed === false)\n            };\n        }\n        default:\n            return state;\n    }\n};\n\n\nexport default reducer;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore} from \"redux\";\nimport reducer from \"./reducer\";\n\n\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n    <Provider store={store}>\n    <Router basename={process.env.PUBLIC_URL}>\n        <App />,\n    </Router>,\n    </Provider>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}